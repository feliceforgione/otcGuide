// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model disease_class {
  id                 Int                @id @default(autoincrement())
  name               String             @unique @db.VarChar(255)
  aliasname          String?            @db.VarChar(100)
  description        String?            @db.VarChar(255)
  buttonimage        String?            @db.VarChar(255)
  order              Int?               @db.TinyInt
  show               Boolean            @default(false)
  disable            Boolean            @default(false)
  disease_subclasses disease_subclass[]
}

model disease_subclass {
  disease_subclass_id          Int     @id @default(autoincrement())
  disease_subclass_name        String  @db.VarChar(255)
  disease_subclass_synonyms    String? @db.VarChar(255)
  disease_subclass_description String? @db.MediumText
  disease_subclass_order       Int?    @db.TinyInt
  disease_subclass_disable     Boolean @default(false)
  disease_subclass_overview    String? @db.MediumText
  nonpharm                     String? @db.MediumText
  image                        String? @db.VarChar(255)

  disease_class_id Int
  disease_class    disease_class @relation(fields: [disease_class_id], references: [id])

  exclusion_questions exclusion_questions[]
}

model exclusion_questions {
  question_id Int     @id @default(autoincrement())
  question    String  @db.VarChar(255)
  male        Boolean @default(false)
  female      Boolean @default(false)
  infant      Boolean @default(false)
  child       Boolean @default(false)
  adult       Boolean @default(false)
  elderly     Boolean @default(false)
  pregnant    Boolean @default(false)
  nursing     Boolean @default(false)

  disease_subclass_id Int?
  disease_subclass    disease_subclass? @relation(fields: [disease_subclass_id], references: [disease_subclass_id])
}

model lnk_mh_algorithm_ques {
  disease_subclass_id Int  @id
  infant              Int?
  child               Int?
  adult_female        Int
  adult_male          Int
  elderly_female      Int?
  elderly_male        Int?
  pregnant            Int?
  nursing             Int?
}

model algorithm_questions {
  algorithm_question_id Int                       @id @default(autoincrement())
  disease_subclass_id   Int?
  question              String?                   @db.VarChar(255)
  question_list         String?                   @db.TinyText
  yes_type              algorithm_questions_type?
  yes_link_id           Int?
  no_type               algorithm_questions_type?
  no_link_id            Int?
  referral_comments     String?                   @db.TinyText
  comments              String?                   @db.Text
}

enum algorithm_questions_type {
  question
  referral
  plan
  symptoms
}

model treatment_plan {
  treatment_plan_id   Int     @id @default(autoincrement())
  disease_subclass_id Int
  plan_name           String  @default("") @db.VarChar(255)
  txt_nonpharm        String? @db.MediumText
  txt_pharm           String? @db.MediumText
  tabs_num            Int     @default(0) @db.SmallInt
  tab3_label          String? @db.VarChar(30)
  tab4_label          String? @db.VarChar(30)
  tab5_label          String? @db.VarChar(30)

  upcs             lnk_trt_plan_upc[]
  treatment_advice lnk_trt_plan_advice[]
}

model lnk_trt_plan_upc {
  lnk_id         Int     @id @default(autoincrement())
  treatment_line Int     @default(1) @db.SmallInt
  upc_order      Int?    @db.UnsignedTinyInt
  disable        Boolean @default(false)

  treatment_plan_id Int?
  treatment_plan    treatment_plan? @relation(fields: [treatment_plan_id], references: [treatment_plan_id])

  upc         String? @db.VarChar(25)
  upc_product upc?    @relation(fields: [upc], references: [upc])
}

model lnk_trt_plan_advice {
  lnk_id       Int                             @id @default(autoincrement())
  advice_type  lnk_trt_plan_advice_advice_type
  advice_order Int?                            @db.TinyInt

  treatment_plan    treatment_plan   @relation(fields: [treatment_plan_id], references: [treatment_plan_id])
  treatment_plan_id Int
  treatment_advice  treatment_advice @relation(fields: [advice_id], references: [advice_id])
  advice_id         Int
}

enum lnk_trt_plan_advice_advice_type {
  nonpharm
  pharm
}

model treatment_advice {
  advice_id           Int     @id @default(autoincrement())
  disease_subclass_id Int
  title               String? @db.VarChar(255)
  text                String  @db.LongText
  list                String? @db.MediumText

  treatment_plan lnk_trt_plan_advice[]
}

model lnk_ingredient_filter_questions {
  lnk_id Int @id @default(autoincrement())

  ingredient         ingredients      @relation(fields: [ingredient_id], references: [ingredient_id])
  ingredient_id      Int
  filter_question    filter_questions @relation(fields: [filter_question_id], references: [filter_question_id])
  filter_question_id Int
}

model filter_questions {
  filter_question_id Int    @id @default(autoincrement())
  question           String @db.Text
  reasoning          String @db.VarChar(255)

  ingredient lnk_ingredient_filter_questions[]
}

model symptoms {
  symptom_id          Int     @id @default(autoincrement())
  symptom_name        String  @db.VarChar(60)
  symptom_description String? @db.VarChar(255)

  algorithm_symptom_set algorithm_symptom_set[]
}

model symptom_types {
  symptom_type_id          Int     @id @default(autoincrement())
  symptom_type             String  @db.VarChar(60)
  symptom_type_description String? @db.VarChar(250)

  algorithm_symptom_set algorithm_symptom_set[]
}

model algorithm_symptom_set {
  algorithm_symptom_set_id Int @id @default(autoincrement())
  algorithm_question_id    Int

  symptom    symptoms @relation(fields: [symptom_id], references: [symptom_id])
  symptom_id Int

  symptom_type    symptom_types? @relation(fields: [symptom_type_id], references: [symptom_type_id])
  symptom_type_id Int?
}

model algorithm_symptom_combos {
  algorithm_symptom_combo_id   Int    @id @default(autoincrement())
  algorithm_question_id        Int
  combination                  String @db.VarChar(255)
  jumpto_algorithm_question_id Int
}

model upc {
  upc_id              Int     @id @default(autoincrement())
  upc                 String  @unique(map: "upc") @db.VarChar(25)
  asin                String? @db.VarChar(25)
  product_line        String  @db.VarChar(255)
  item_name           String  @db.VarChar(255)
  description         String? @db.Text
  product_details     String? @db.TinyText
  main_image          String? @db.VarChar(255)
  upc_label_unit_dose String? @db.VarChar(100)
  size                Float?  @db.Float
  size_uom_id         Int?
  flavor_id           Int?
  other_info          String? @db.MediumText
  questions           String? @db.MediumText
  num_of_items        Int?    @db.SmallInt
  height              Int?    @db.SmallInt
  height_units        String? @db.VarChar(200)
  length              Int?    @db.SmallInt
  length_units        String? @db.VarChar(200)
  width               Int?    @db.SmallInt
  width_units         String? @db.VarChar(200)
  weight              Int?    @db.SmallInt
  weight_units        String? @db.VarChar(200)
  bkg_highlight       String  @db.VarChar(6)
  flag_yellow         Int     @default(0) @db.TinyInt
  flag_red            Int     @default(0) @db.TinyInt

  brand_composition brand_composition[]
  images            images[]
  directions        directions[]
  indications       indications[]
  warnings          warnings[]
  features          features[]
  treatment_plans   lnk_trt_plan_upc[]

  product_type    product_type? @relation(fields: [product_type_id], references: [product_type_id])
  product_type_id Int?

  brand    brands? @relation(fields: [brand_id], references: [brand_id])
  brand_id Int?

  manufacturer    manufacturer? @relation(fields: [manufacturer_id], references: [manufacturer_id])
  manufacturer_id Int?

  dosage_form    dosage_form? @relation(fields: [dosage_form_id], references: [dosage_form_id])
  dosage_form_id Int?

  validation_route validation_route? @relation(fields: [route_id], references: [route_id])
  route_id         Int?
}

model brand_composition {
  brand_composition_id Int @id @default(autoincrement())

  upc_product upc?    @relation(fields: [upc], references: [upc])
  upc         String? @db.VarChar(25)

  ingredient    ingredients? @relation(fields: [ingredient_id], references: [ingredient_id])
  ingredient_id Int?

  ingredient_use    ingredient_uses? @relation(fields: [ingredient_use_id], references: [ingredient_use_id])
  ingredient_use_id Int?

  ingredient_type    ingredient_type? @relation(fields: [ingredient_type_id], references: [ingredient_type_id])
  ingredient_type_id Int?
}

model ingredients {
  ingredient_id Int @id @default(autoincrement())

  ingredient_strength          Float?  @db.Float
  ingredient_strength_units_id Int?
  ingredient_equivalence       String? @db.VarChar(255)
  ingredient_hypoallergenic    Int     @default(0) @db.TinyInt

  brand_composition brand_composition[]

  name               ingredient_name? @relation(fields: [ingredient_name_id], references: [ingredient_name_id])
  ingredient_name_id Int?

  medicalCondition lnk_ingredient_medical_condition[]
  filter_question  lnk_ingredient_filter_questions[]
}

model ingredient_name {
  ingredient_name_id         Int           @id @default(autoincrement())
  ingredient_name            String        @unique(map: "ingredient_name") @db.VarChar(255)
  ingredient_broader_name_id Int?
  ingredient                 ingredients[]
}

model ingredient_uses {
  ingredient_use_id Int    @id @default(autoincrement())
  ingredient_use    String @unique(map: "ingredient_use") @db.VarChar(255)

  brand_composition brand_composition[]
}

model ingredient_type {
  ingredient_type_id Int    @id @default(autoincrement())
  ingredient_type    String @unique(map: "ingredient_type") @db.VarChar(255)

  brand_composition brand_composition[]
}

model lnk_ingredient_medical_condition {
  lnk_id Int @id @default(autoincrement())

  ingredient    ingredients @relation(fields: [ingredient_id], references: [ingredient_id])
  ingredient_id Int

  medicalCondition     medical_conditions @relation(fields: [medical_condition_id], references: [medical_condition_id])
  medical_condition_id Int
}

model medical_conditions {
  medical_condition_id          Int    @id @default(autoincrement())
  medical_condition             String @db.VarChar(255)
  medical_condition_layman_term String @db.VarChar(255)

  ingredient lnk_ingredient_medical_condition[]
}

model validation_strength_units {
  strength_unit_id           Int    @id @default(autoincrement())
  strength_unit_abbreviation String @db.VarChar(25)
  strength_unit_description  String @db.VarChar(100)

  @@unique([strength_unit_abbreviation, strength_unit_description], map: "strength_unit_abbreviation")
}

model product_type {
  product_type_id Int    @id @default(autoincrement())
  type            String @unique(map: "type") @db.VarChar(255)

  upc upc[]
}

model brands {
  brand_id   Int    @id @default(autoincrement())
  brand_name String @unique(map: "brand_name") @db.VarChar(255)

  upc upc[]
}

model manufacturer {
  manufacturer_id   Int    @id @default(autoincrement())
  manufacturer_name String @unique(map: "manufacturer_name") @db.VarChar(255)

  upc upc[]
}

model dosage_form {
  dosage_form_id    Int    @id @default(autoincrement())
  dosage_form_class String @db.VarChar(255)
  dosage_form_term  String @db.VarChar(255)

  upc upc[]
}

model validation_route {
  route_id           Int    @id @default(autoincrement())
  route_abbreviation String @db.VarChar(25)
  route_description  String @db.VarChar(100)

  upc upc[]

  @@unique([route_abbreviation, route_description], map: "route_abbreviation")
}

model directions {
  direction_id    Int     @id @default(autoincrement())
  direction_title String? @db.VarChar(255)
  direction_txt   String? @db.Text
  direction_list  String? @db.Text
  order           Int?    @db.TinyInt

  upc_product upc?    @relation(fields: [upc], references: [upc])
  upc         String? @db.VarChar(25)
}

model indications {
  indication_id   Int     @id @default(autoincrement())
  indication_txt  String  @db.Text
  indication_list String? @db.VarChar(255)
  order           Int?    @db.TinyInt

  upc_product upc?    @relation(fields: [upc], references: [upc])
  upc         String? @db.VarChar(25)
}

model warnings {
  warning_id    Int     @id @default(autoincrement())
  warning_title String? @db.VarChar(255)
  warning_txt   String? @db.Text
  warning_list  String? @db.Text
  order         Int?    @db.TinyInt

  upc_product upc?    @relation(fields: [upc], references: [upc])
  upc         String? @db.VarChar(25)
}

model features {
  feature_id  Int     @id @default(autoincrement())
  ASIN        String? @db.VarChar(25)
  feature_txt String  @db.VarChar(255)

  upc_product upc?    @relation(fields: [upc], references: [upc])
  upc         String? @db.VarChar(25)
}

model images {
  image_id Int @id @default(autoincrement())

  ASIN   String?      @db.VarChar(25)
  link   String       @db.VarChar(255)
  type   images_type?
  height Int?         @db.SmallInt
  width  Int?         @db.SmallInt

  upc_product upc?    @relation(fields: [upc], references: [upc])
  upc         String? @db.VarChar(25)
}

enum images_type {
  small
  medium
  large
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// Views
view v_upc_medicalhistory {
  row_num                       BigInt  @default(0) @db.UnsignedBigInt
  upc                           String? @db.VarChar(25)
  ingredient_id                 Int     @default(0)
  ingredient_name_id            Int     @default(0)
  ingredient_name               String  @db.VarChar(255)
  ingredient_broader_name_id    Int?    @default(0)
  ingredient_broader_name       String? @db.VarChar(255)
  ingredient_type_id            Int     @default(0)
  ingredient_hypoallergenic     Int     @default(0) @db.TinyInt
  medical_condition_id          Int?
  medical_condition_layman_term String? @db.VarChar(255)

  @@unique(row_num)
}

view v_upc_filterquestions {
  row_num            BigInt  @default(0) @db.UnsignedBigInt
  upc                String? @db.VarChar(25)
  ingredient_id      Int     @default(0)
  ingredient_name_id Int?    @default(0)
  ingredient_name    String? @db.VarChar(255)
  filter_question_id Int?    @default(0)
  question           String? @db.Text

  @@unique(row_num)
}
