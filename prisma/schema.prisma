// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model disease_class {
  id                 Int                @id @default(autoincrement())
  name               String             @unique @db.VarChar(255)
  aliasname          String?            @db.VarChar(100)
  description        String?            @db.VarChar(255)
  buttonimage        String?            @db.VarChar(255)
  order              Int?               @db.TinyInt
  show               Boolean            @default(false)
  disable            Boolean            @default(false)
  disease_subclasses disease_subclass[]
}

model disease_subclass {
  disease_subclass_id          Int     @id @default(autoincrement())
  disease_subclass_name        String  @db.VarChar(255)
  disease_subclass_synonyms    String? @db.VarChar(255)
  disease_subclass_description String? @db.MediumText
  disease_subclass_order       Int?    @db.TinyInt
  disease_subclass_disable     Boolean @default(false)
  disease_subclass_overview    String? @db.MediumText
  nonpharm                     String? @db.MediumText

  disease_class_id Int
  disease_class    disease_class @relation(fields: [disease_class_id], references: [id])

  exclusion_questions exclusion_questions[]
}

model exclusion_questions {
  question_id Int     @id @default(autoincrement())
  question    String  @db.VarChar(255)
  male        Boolean @default(false)
  female      Boolean @default(false)
  infant      Boolean @default(false)
  child       Boolean @default(false)
  adult       Boolean @default(false)
  elderly     Boolean @default(false)
  pregnant    Boolean @default(false)
  nursing     Boolean @default(false)

  disease_subclass_id Int?
  disease_subclass    disease_subclass? @relation(fields: [disease_subclass_id], references: [disease_subclass_id])
}

model lnk_mh_algorithm_ques {
  disease_subclass_id Int  @id
  infant              Int?
  child               Int?
  adult_female        Int
  adult_male          Int
  elderly_female      Int?
  elderly_male        Int?
  pregnant            Int?
  nursing             Int?
}

model algorithm_questions {
  algorithm_question_id Int                       @id @default(autoincrement())
  disease_subclass_id   Int?
  question              String?                   @db.VarChar(255)
  question_list         String?                   @db.TinyText
  yes_type              algorithm_questions_type?
  yes_link_id           Int?
  no_type               algorithm_questions_type?
  no_link_id            Int?
  referral_comments     String?                   @db.TinyText
  comments              String?                   @db.Text
}

enum algorithm_questions_type {
  question
  referral
  plan
  symptoms
}

model treatment_plan {
  treatment_plan_id   Int                @id @default(autoincrement())
  disease_subclass_id Int
  plan_name           String             @default("") @db.VarChar(255)
  txt_nonpharm        String?            @db.MediumText
  txt_pharm           String?            @db.MediumText
  tabs_num            Int                @default(0) @db.SmallInt
  tab3_label          String?            @db.VarChar(30)
  tab4_label          String?            @db.VarChar(30)
  tab5_label          String?            @db.VarChar(30)
  upcs                lnk_trt_plan_upc[]

  treatment_advice  lnk_trt_plan_advice[]
}

model lnk_trt_plan_upc {
  lnk_id         Int    @id @default(autoincrement())
  upc            String @db.VarChar(25)
  treatment_line Int    @default(1) @db.SmallInt
  upc_order      Int?   @db.UnsignedTinyInt

  treatment_plan_id Int?
  treatment_plan    treatment_plan? @relation(fields: [treatment_plan_id], references: [treatment_plan_id])
}

model lnk_trt_plan_advice {
  lnk_id            Int                             @id @default(autoincrement())  
  advice_type       lnk_trt_plan_advice_advice_type
  advice_order      Int?                            @db.TinyInt

  treatment_plan treatment_plan @relation(fields: [treatment_plan_id], references: [treatment_plan_id])
  treatment_plan_id Int
  treatment_advice treatment_advice @relation(fields: [advice_id], references: [advice_id])
  advice_id         Int

}

enum lnk_trt_plan_advice_advice_type {
  nonpharm
  pharm
}

model treatment_advice {
  advice_id           Int      @id @default(autoincrement())
  disease_subclass_id Int      
  title               String?  @db.VarChar(255)
  text                String   @db.LongText
  list                String?  @db.MediumText

  treatment_plan lnk_trt_plan_advice[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
